# -*- coding: utf-8 -*-
"""deep_classes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QIm_dq_SSwnROfsiyoVQNUcWTl9oJpk-
"""

from sklearn.cluster import KMeans
import numpy as np
from pandas import DataFrame
from math import pow
import math

import torch


class DeepAnT(torch.nn.Module):
    """
        Model : Class for DeepAnT model
    """
    def __init__(self, LOOKBACK_SIZE, DIMENSION,DATASETNAME):
        super(DeepAnT, self).__init__()
        self.conv1d_1_layer = torch.nn.Conv1d(in_channels=LOOKBACK_SIZE, out_channels=16, kernel_size=3)
        self.relu_1_layer = torch.nn.ReLU()
        self.maxpooling_1_layer = torch.nn.MaxPool1d(kernel_size=2)

        if DATASETNAME=='smtp' or DATASETNAME=='http' or DATASETNAME=='pima_diabets':
          self.conv1d_2_layer = torch.nn.Conv1d(in_channels=16, out_channels=16, kernel_size=1)
        else:
          self.conv1d_2_layer = torch.nn.Conv1d(in_channels=16, out_channels=16, kernel_size=3)
        self.relu_2_layer = torch.nn.ReLU()

        if DATASETNAME=='smtp' or DATASETNAME=='http':
          self.maxpooling_2_layer = torch.nn.MaxPool1d(kernel_size=1)
        else:
          self.maxpooling_2_layer = torch.nn.MaxPool1d(kernel_size=2)

        self.flatten_layer = torch.nn.Flatten()

        if DATASETNAME=='wine':
	          self.dense_1_layer = torch.nn.Linear(32, 40)
        elif DATASETNAME=='smtp' or DATASETNAME=='http':
	          self.dense_1_layer = torch.nn.Linear(16, 16)
        elif DATASETNAME=='pima_diabets' or DATASETNAME=='UGR16':   
	          self.dense_1_layer = torch.nn.Linear(16, 40)

        else:
            self.dense_1_layer = torch.nn.Linear(96,40)

        self.relu_3_layer = torch.nn.ReLU()
        self.dropout_layer = torch.nn.Dropout(p=0.25)

        if DATASETNAME=='smtp' or DATASETNAME=='http':
          self.dense_2_layer = torch.nn.Linear(16, DIMENSION)
        else:
          self.dense_2_layer = torch.nn.Linear(40, DIMENSION)

        
    def forward(self, x):
        x = self.conv1d_1_layer(x)
        x = self.relu_1_layer(x)
        x = self.maxpooling_1_layer(x)
        x = self.conv1d_2_layer(x)
        x = self.relu_2_layer(x)
        x = self.maxpooling_2_layer(x)
        x = self.flatten_layer(x)
        #print(x.shape)
        x = self.dense_1_layer(x)
        x = self.relu_3_layer(x)
        x = self.dropout_layer(x)
        return self.dense_2_layer(x)


#**************************
class LSTMAE(torch.nn.Module):
    """
        Model : Class for LSTMAE model
    """
    def __init__(self, LOOKBACK_SIZE, DIMENSION):
        super(LSTMAE, self).__init__()
        self.lstm_1_layer = torch.nn.LSTM(DIMENSION, 128, 1)
        self.dropout_1_layer = torch.nn.Dropout(p=0.2)
        self.lstm_2_layer = torch.nn.LSTM(128, 64, 1)
        self.dropout_2_layer = torch.nn.Dropout(p=0.2)
        self.lstm_3_layer = torch.nn.LSTM(64, 64, 1)
        self.dropout_3_layer = torch.nn.Dropout(p=0.2)
        self.lstm_4_layer = torch.nn.LSTM(64, 128, 1)
        self.dropout_4_layer = torch.nn.Dropout(p=0.2)
        self.linear_layer = torch.nn.Linear(128, DIMENSION)
        
    def forward(self, x):
        x, (_,_) = self.lstm_1_layer(x)
        x = self.dropout_1_layer(x)
        x, (_,_) = self.lstm_2_layer(x)
        x = self.dropout_2_layer(x)
        x, (_,_) = self.lstm_3_layer(x)
        x = self.dropout_3_layer(x)
        x, (_,_) = self.lstm_4_layer(x)
        x = self.dropout_4_layer(x)
        return self.linear_layer(x)